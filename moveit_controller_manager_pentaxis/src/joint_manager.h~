/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2013, Moises Estrada Casta/neda
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Moises Estrada Casta/neda nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Moises Estrada */
#include <string>
#include "std_msgs/String.h"
#include <math.h>


#include "joint.h"

class JointManager {
	int n_joints; 
	int n_points;
	moveit_msgs::RobotTrajectory t;
	float acc_max;
	float vel_max;
  public:
	Joint joints[5];
	int maxTrajJoint;

  public:
	JointManager(const moveit_msgs::RobotTrajectory &trajectory) {
		acc_max = M_PI; // 100,000 steps/sec^2
		t = trajectory;
		n_joints = t.joint_trajectory.joint_names.size();
		n_points = t.joint_trajectory.points.size();
		setJointsPositions();
		setMaxTrajectoryJoint();
		setVelocities();
		setAccelerations();
		joints[4].special = true;
	}
	void setJointsPositions();
	void setMaxTrajectoryJoint();
	void setVelocities();
	void setAccelerations();
	std::string getPosition_cmd();
	std::string getVelocity_cmd();
	std::string getAcceleration_cmd();
	std::string getDeaccceleration_cmd();
};

void JointManager::setJointsPositions() {
	for(int i = 0; i < n_joints; i++) {
		joints[i].setPositions(t.joint_trajectory.points[0].positions[i], t.joint_trajectory.points[n_points-1].positions[i]);
	}
	joints[4].distanceR = -1*joints[4].distance*joints[4].direction + joints[3].distance*joints[3].direction;
	joints[4].distance = fabs(-1*joints[4].distance*joints[4].direction + joints[3].distance*joints[3].direction/2);
	
}

void JointManager::setMaxTrajectoryJoint() {
	float maxDistance = joints[0].distance;
	maxTrajJoint = 0;
	for(int i = 1; i < n_joints; i++) {
		if(maxDistance < joints[i].distance) {
			maxDistance = joints[i].distance;
			maxTrajJoint = i;
		}
	}
}

void JointManager::setVelocities() {
	joints[maxTrajJoint].setVelocity( sqrt(joints[maxTrajJoint].distance*acc_max/2) );
	for(int i = 0; i < n_joints; i++) {
		if(i != maxTrajJoint) {
			joints[i].setVelocity( joints[maxTrajJoint].velocity*joints[i].distance/joints[maxTrajJoint].distance );
		}
	}
}

void JointManager::setAccelerations() {
	joints[maxTrajJoint].setAcceleration( acc_max );
	for(int i = 0; i < n_joints; i++) {
		if(i != maxTrajJoint) {
			joints[i].setAcceleration( 2*joints[i].velocity / ( (2*joints[maxTrajJoint].velocity/acc_max) + (joints[maxTrajJoint].distance/joints[maxTrajJoint].velocity ) - (joints[i].distance/joints[i].velocity) ) );
		}
	}
}

std::string JointManager::getPosition_cmd() {
	std::string s_cmd = "PR ";
	for(int i = 0; i < n_joints; i++) {
		s_cmd = s_cmd + joints[i].posToString();
		if(i != n_joints - 1) 
			s_cmd = s_cmd + ", ";
	}
	s_cmd = s_cmd + "\r";
	return s_cmd;
}

std::string JointManager::getVelocity_cmd() {
	std::string s_cmd = "SP ";
	for(int i = 0; i < n_joints; i++) {
		s_cmd = s_cmd + joints[i].velToString();
		if(i != n_joints - 1) 
			s_cmd = s_cmd + ", ";
	}
	s_cmd = s_cmd + "\r";
	return s_cmd;
}

std::string JointManager::getAcceleration_cmd() {
	std::string s_cmd = "AC ";
	for(int i = 0; i < n_joints; i++) {
		s_cmd = s_cmd + joints[i].accToString();
		if(i != n_joints - 1) 
			s_cmd = s_cmd + ", ";
	}
	s_cmd = s_cmd + "\r";
	return s_cmd;
}

std::string JointManager::getDeaccceleration_cmd() {
	std::string s_cmd = "DC ";
	for(int i = 0; i < n_joints; i++) {
		s_cmd = s_cmd + joints[i].accToString();
		if(i != n_joints - 1) 
			s_cmd = s_cmd + ", ";
	}
	s_cmd = s_cmd + "\r";
	//cmd_dec = s_cmd.c_str();
	return s_cmd;
}


